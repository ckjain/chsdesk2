

Masql setup

Gem install mysql

copy libmysql.dll in bin directory of ruby
and system32 of window
take libmySQL.dll from lateralview

******************************************
to be changed in production

1. config.action_mailer.default_url_options = { :host => "localhost:3000" }
--------changes as per the site server ---config/evinroments/development.rb
2. force ssl to be acyivated 
3. Send confirmation email of password reset
4. In Member table last_signin changed in the table from default NULL=false to NULL=true
***********************************************


Git command
----------work in branch and merge with master---------
git checkout -b modify-README-- * identifies which branch weâ€™re currently on
git status
git commit -a -m "Improved the README file"
$ git checkout master
   Switched to branch 'master'
$ git merge modify-README
$ git branch -d modify-README
   Deleted branch modify-README (was 2c92bef).
------------when mess up a branch---------
# For illustration only; don't do this unless you mess up a branch
$ git checkout -b topic-branch
$ <really screw up the branch>
$ git add .
$ git commit -a -m "Screwed up"
$ git checkout master
$ git branch -D topic-branch
-------------upload to git hub-------------
git add .
git commit -m "Initial commit"
git push origin master
----------------------------------

<p>
  <%= f.label :society_tokens, "Societies" %><br />
  <%= f.text_field :society_tokens, "data-pre" => @unit.societies.map(&:attributes).to_json %>
</p>

<p>
  <%= f.label :member_tokens, "Members" %><br />
  <%= f.text_field :member_tokens, "data-pre" => @unit.members.map(&:attributes).to_json %>
</p>

Query;--
Client.where(:created_at => (params[:start_date].to_date)..(params[:end_date].to_date))
gives following--
SELECT "clients".* FROM "clients" WHERE ("clients"."created_at" BETWEEN '2010-09-29' AND '2010-11-30')

Client.where({ :created_at => (Time.now.midnight - 1.day)..Time.now.midnight})
SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')
***********************************************************

LOAD DATA INFILE 'c:/importdata.txt' into table `chsdesk3`.`members`;


An article on using extjs in rails--------------------------

I currently have an extremely large, desktop style app written in ExtJS. It used to run on top of Perl's Catalyst MVC framework, but once the entire View layer was converted to an ExtJS based desktop I started migrating to Ruby on Rails models and controllers. It is equally as fast, if not faster, and easier to maintain and has a much smaller code base.

-Make sure that you set your active record config to not include the root name of the model in the json, 
so that Ext's JsonStore has no problem reading the records. There is an option on ActiveRecord BASE called
 include _ root _ in _ json you have to set to false.

-Make sure that you properly define your Application classes in Ext and maximize code re-use 
and you are going to want some sort of method to clean up unused nodes in the DOM. 
Javascript performance can be a real pain unless you are using the latest versions of Safari or Firefox 3.1.

-You probably will want some sort of caching method for data on the server to be served to 
your application in JSON format at the time the page is loaded. This will cut down on the number of 
round trips via Ajax.

-Definitely make use of Ext's WindowManager and StoreManager objects, or roll your own from 
Ext.util.MixedCollection

-Develop your code in separate, managable files, then have a build process which combines them into a 
single file, and then run YUI's compressor or Dean Edwards Packer on it to compress / obfuscate the file. 
Serve all JS and CSS in their own single files, including the Ext supplied ones.

-------------------------------------------------------------------

def temp
   scope :discontinued, where(:discontinued => true)
  
      def self.cheaper_than(price)
        where("products.price < ?", price)
      end
  
  scope :cheap, cheaper_than(5)
  scope :with_cheap_products, joins(:products) & Product.cheap
 end
 def east__get_data(params)
  # extract Ext filters from params (we want them keep on working)
  filters = params[:filter] ||= {}

  # calculate the foreign key based on container class
  foreign_key = aggregatees[:center][:data_class_name].
                constantize.table_name.singularize + "_id"

  # add the foreign key filter to the filters
  filters.merge!({:our_fkey_filter => {
    :data  => {:value => params[:container_id], :type => "integer"},
    :field => foreign_key}
  })

  # call the original get_data method, but with updated filters
  method_missing(:east__get_data, params.merge(:filter => filters))
end
-----------------------------------------------------
ActionMailer::Base.smtp_settings = {
    :enable_starttls_auto => true,  #this is the important shit!
    :address        => 'smtp.gmail.com',
    :port           => 587,
    :domain         => 'your.domain.com',
    :authentication => :plain,
    :user_name      => 'login@your.domain.com',
    :password       => 'assword'
  }
------------------------------------------------------------
CREATE TRIGGER [dbo].[updated_myTable] ON  [dbo].[myTable] AFTER UPDATE
AS 
BEGIN
    SET NOCOUNT ON;
    UPDATE [dbo].[myTable] Set AdmitDateTime = GetDate() where pkid in (SELECT pkid FROM Inserted)
END
----------------------------------------------------------------------------
validates :terms_of_service, :acceptance => { :accept => 'yes' }
validates :terms_of_service, :acceptance => true

has_many :books
  validates_associated :books
  
  validates :size, :inclusion => { :in => %w(small medium large),
    :message => "%{value} is not a valid size" }
    
 validates :name, :login, :email, :presence => true
 ********* 
 3.8 numericality  
    :greater_than – Specifies the value must be greater than the supplied value. The default error message for this option is “must be greater than %{count}”.
    :greater_than_or_equal_to – Specifies the value must be greater than or equal to the supplied value. The default error message for this option is “must be greater than or equal to %{count}”.
    :equal_to – Specifies the value must be equal to the supplied value. The default error message for this option is “must be equal to %{count}”.
    :less_than – Specifies the value must be less than the supplied value. The default error message for this option is “must be less than %{count}”.
    :less_than_or_equal_to – Specifies the value must be less than or equal the supplied value. The default error message for this option is “must be less than or equal to %{count}”.
    :odd – Specifies the value must be an odd number if set to true. The default error message for this option is “must be odd”.
    :even – Specifies the value must be an even number if set to true. The default error message for this option is “must be even”.
*************
validates_with 
class Person < ActiveRecord::Base
  validates_with GoodnessValidator, :fields => [:first_name, :last_name]
end
 
class GoodnessValidator < ActiveModel::Validator
  def validate(record)
    if options[:fields].any?{|field| record.send(field) == "Evil" }
      record.errors[:base] << "This person is evil"
    end
  end
 *************** 
  validates_each
validates_each :name, :surname do |model, attr, value|
    model.errors.add(attr, 'must start with upper case') if value =~ /\A[a-z]/
  end
end
********************************
validates :expiration_date,
  :date => { :after => Time.now, :before => Time.now + 1.year }

:after
:before
:after_or_equal_to
:before_or_equal_to
**************************************
Available Callbacks
0.1 Creating an Object

    before_validation
    after_validation
    before_save
    before_create
    around_create
    after_create
    after_save

0.2 Updating an Object

    before_validation
    after_validation
    before_save
    before_update
    around_update
    after_update
    after_save

10.3 Destroying an Object

    before_destroy
    after_destroy
    around_destroy

********************************************
Current roles of sharmila are listed below.
You can add a role roles by selecting the checkboxes and remove a role by de-selecting the checkbox.

Community Administrator*	
Noticeboard Administrator	
Complaint Box Administrator	
Complaint Category Administrator
Repository Administrator	
Vendor Administrator	
Accounting Administrator	
Utility Billing Administrator
Action Item Administrator	
Facility Booking Administrator	
Vehicle Administrator	
Asset Administrator
Notification Administrator	
Service Staff Administrator	
Data Entry Operator	Auditor
Security Front Office	
Poll Administrator	
Accounting Assistant
* Community Administrator overrides all other role assignments of a user. Any member/staff being assigned "Communtiy Administrator" role will have access to ALL information and can perform ANY action on the data associated with your complex. This includes removing other community administrators as well. Thus please assign "Communtiy Administrator" role responsibly.


